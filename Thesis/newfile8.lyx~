#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Section
Introduction
\end_layout

\begin_layout Standard

\lang british
TIT
\lang english
LE Building a better VHDL testing environment
\end_layout

\begin_layout Standard
To understand what VHDL is used for, a small introduction on digital electronics
 is best read first.
 Digital electronics differs from analog electronics in that it uses a discrete
 set of voltage levels to transmit signals.
 The most common number of items in the set is 2, namely one and zero.
 The advantage of using a discrete number of levels rather than a continuous
 signal is that noise generated by the environment, thermal noise and other
 interfering factors will have a far less significant influence on the signal.
 To process these discrete signals, electronics are made up of transistors
 that form 
\emph on
logic gates
\emph default
, these logic gates make it so that only a certain combination of ones and
 zeroes at the inputs result in certain ones or zeroes at the outputs.
\end_layout

\begin_layout Standard
The most common gates are 
\emph on
nand
\emph default
 (not and, two ones make a zero, all other combinations result in one) and
 
\emph on
nor 
\emph default
(not or, any one at the input results in a zero at the output).
 A certain combination of these logic gates are used to build higher-level
 blocks such as flip-flops, which are used to make registers and so on up
 to the entire chip design.
 An HDL can be used to describe any one of these levels, right down to the
 logic gate level, however this last one might not be a good idea considering
 most synthesis tools can produce superior logic gate-level layouts
\begin_inset CommandInset citation
LatexCommand cite
key "key-1"

\end_inset

.
 The level that uses certain blocks of logic gates to describe more complex
 behaviour is called the 
\emph on
Register Transfer Level
\emph default
 or RTL.
 Some blocks are standard implementations that have been widely used and
 nearly fully optimized, such as memories, flipflops and clocks.
 An RTL flipflop implementation is shown here: 
\begin_inset space ~
\end_inset


\end_layout

\begin_layout LyX-Code
library IEEE;
\begin_inset Newline newline
\end_inset

use IEEE.std_logic_1164.all;
\begin_inset Newline newline
\end_inset

entity DFF is
\begin_inset Newline newline
\end_inset

     Port ( D   : in  std_logic;
\begin_inset Newline newline
\end_inset

            CLK : in  std_logic;
\begin_inset Newline newline
\end_inset

            Q   : out std_logic;
\begin_inset Newline newline
\end_inset

end DFF;
\begin_inset Newline newline
\end_inset

architecture Behavioral of DFF is
\begin_inset Newline newline
\end_inset

     begin
\begin_inset Newline newline
\end_inset

          process (CLK)
\begin_inset Newline newline
\end_inset

          begin
\begin_inset Newline newline
\end_inset

               if rising_edge(CLK) then
\begin_inset Newline newline
\end_inset

                    Q <= D;
\begin_inset Newline newline
\end_inset

               end if;
\begin_inset Newline newline
\end_inset

          end process;
\begin_inset Newline newline
\end_inset

end Behavioral;
\end_layout

\begin_layout Standard
The IEEE library provides a number of extensions on the original VHDL code
 that allow a more realistic simulation and description of hardware behaviour.
 An entity defines the inputs and outputs of a certain building block, in
 this case the D-FlipFlop or DFF.
 The D stands for Delay, and it simple puts on its output Q that which was
 on the input one clock cycle earlier.
 The architecture, in this case Behavioural, takes the description of an
 entity and assigns a real implementation to it.
 All processes are parallelly-executed, this does not mean that all are
 triggered at the same time, nor do they take as long to finish, but it
 means that any process can be executed alongside any other process.
 In this case there is only one (nameless) process that describes the entire
 behaviour of the flipflop.
 It waits for the rising edge of the clock, which is a transition from zero
 to one, and then it schedules the value of D to be put on Q until the next
 rising edge appears.
\end_layout

\begin_layout Standard
This is a basic example of an entity, an architecture and a process.
 This flipflop could be used in certain numbers to build a 
\emph on
register
\emph default
, a collection of ones and zeros (henceforth named 
\emph on
bits
\emph default
) that is used to (temporarily) store these values.
 The register could then be used alongside combinational logic to build
 an even bigger entity.
 The idea here is that small building blocks can be combined to produce
 vast and complex circuits that are nearly impossible to describe in one
 go.
 Adding all these layers together also creates a lot of room for error,
 and having a multi-level design makes it somewhat difficult to pinpoint
 the exact level and location of any errors.
 Therefor it is paramount that all code on all levels is tested thoroughly,
 this is done by use of 
\emph on
testbenches
\emph default
.
\begin_inset CommandInset citation
LatexCommand cite
key "key-2"

\end_inset


\end_layout

\begin_layout Standard
Testbenches are made up of code that takes a certain building block, the
 
\emph on
Unit Under Test
\emph default
 (UUT) or 
\emph on
Device Under Test
\emph default
 (DUT).
 The testbench then performs a certain sequence of inputs and monitors the
 outputs.
 If the device performs normally, the received output sequence should match
 a certain 
\emph on
golden reference
\emph default
, the exepected output sequence.
 In these testbenches it is also interesting to see how well a device performs
 if its inputs behave outside the normal mode of operation.
 When all of these tests have finished and the ouput performs as expected,
 the device is ready to be put into production or further down the developmental
 process.
\end_layout

\begin_layout Standard
It is easy to see that if a device is not tested properly and faults propagate
 it can be very expensive to correct, especially at the stage of production,
 where a single photomask, used to 
\begin_inset Quotes eld
\end_inset

print
\begin_inset Quotes erd
\end_inset

 part of the layout, can easily cost $100,000
\begin_inset CommandInset citation
LatexCommand cite
key "key-3"

\end_inset

.
 Therefore a large portion of time is spent testing the code and writing
 more tests for this purpose.
 Both writing and testing the code can
\end_layout

\begin_layout Standard
VHDL is one of two most used 
\emph on
Hardware Description Languages
\emph default
 (HDLs) in the world.
 They were first used to describe the behaviour of hardware but then later
 were used to be 
\emph on
synthesized
\emph default
 as well.
 The process of synthesizing takes a description written in an HDL and prepares
 a layout of what a real computerchip would look like if it were to behave
 as the description says.
\end_layout

\begin_layout Standard
PUNTJES
\end_layout

\begin_layout Standard
VHDL 'tutorial' - alles uitleggen -> Wat is VHDL, waar gebruiken etc
\end_layout

\begin_layout Standard
Achtergrond in andere talen -> wat heeft TDD gedaan en waarom werkt het?
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "key-1"

\end_inset

http://www.asic-world.com/vhdl/intro1.html
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "key-2"

\end_inset

Writing Testbenches: Functional Verification of HDL Models
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "key-3"

\end_inset

Mask Cost and Profitability in Photomask Manufacturing: An Empirical Analysis
\end_layout

\end_body
\end_document
