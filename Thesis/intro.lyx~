#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language british
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize 11
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Building a better VHDL testing environment
\end_layout

\begin_layout Author
Joren Guillaume
\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Abstract
\begin_inset Note Note
status open

\begin_layout Plain Layout
<To be filled out.>
\end_layout

\end_inset


\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Part
Problem and background
\end_layout

\begin_layout Section
Problem
\end_layout

\begin_layout Standard
Developing VHDL, like any code, is prone to error creation, either by user
 or by wrong product specifications.
 To ensure errors are weeded out before the more expensive production begins,
 the code is subjected to rigorous testing.
 For full product testing by conventional means, large and impractical tests
 are needed.
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

Because testing is such a time consuming process, finding errors often results
 in severe delays due to the need to both correct the error and test for
 others.
 Therefore it is in the best interests of both testing engineers and software
 engineers to find and correct errors with minimal delay and maximal effort.
 This process should affect the least amount of code possible as to minimize
 time spent retesting and recoding.
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

In this thesis, a number of mechanics are used to optimize both testing
 and coding.
 Based loosely off of Test Driven Development (TDD), tests are written to
 both function and be tested independently to maximize test coverage with
 minimal effort.
 To this end, a library with often used functions and other useful code
 is made available.
 Alongside of it is a tool, written in Python, to process tests made with
 this library independently and represent the results in a quick and easy
 to read format.
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset


\begin_inset Note Note
status open

\begin_layout Plain Layout
^Solution needs to be filled out more later.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Section
Introduction
\end_layout

\begin_layout Subsection
Digital Electronics
\end_layout

\begin_layout Standard
There are two kinds of electronic appliances and circuits, digital and analogue.
 Digital electronics differ from analogue electronics in that they use a
 discrete set of voltage levels to transmit signals.
 The most common number of items in the set is 2, a level for one (commonly
 named 
\begin_inset Quotes eld
\end_inset

high
\begin_inset Quotes erd
\end_inset

) and a level for zero (commonly named 
\begin_inset Quotes eld
\end_inset

ground
\begin_inset Quotes erd
\end_inset

 or 
\begin_inset Quotes eld
\end_inset

low
\begin_inset Quotes erd
\end_inset

).
 The advantage of using a discrete number of levels rather than a continuous
 signal as is used in analogue electronics is that noise generated by the
 environment, thermal noise and other interfering factors, will have but
 a minor influence on the signal.
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
To process these discrete signals, electronics are made up of transistors
 that nowadays are formed in with the 
\emph on
Complementary Metal Oxide Semiconductor 
\emph default
(CMOS) technology.
 This technology uses both an 
\emph on
NPN
\emph default
 and a 
\emph on
PNP
\emph default
 transistor that work in a push-pull configuration.
 The p's and n's in NPN and PNP simply stand for 
\emph on
Positive
\emph default
 and 
\emph on
Negative
\emph default
, they are made of positive and negative doped lumps of semiconductor (usually
 Silicon-Dioxide or SO
\begin_inset Formula $_{2}$
\end_inset

).
 A transistor is basically a blockade on a track and depending on the force
 applied to its Gate, it opens or closes the track.
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
In reality, the force takes form of a current and an NPN transistor opens
 its gate when a positive current is applied.
 A PNP transistor, however, always leaves its gate open until a current
 is applied.
 This means that if we send the same signal to an NPN and a PNP transistor,
 with one of the signals inverted, we can open and close two parts of the
 entire circuit at the same time.
 This is useful to both direct a certain signal to ground and at the same
 time close its connection with the 
\emph on
source
\emph default
 (the power source).
 Hence also the name 
\emph on
Complementary
\emph default
 MOS, the NPN and PNP complement each other.
\end_layout

\begin_layout Standard
A certain combination of transistors is used to make 
\emph on
logic gates
\emph default
.
 These logic gates make it so that only a certain combination of ones and
 zeroes at the inputs result in certain ones or zeroes at the outputs.
 For instance, one of the most common logic gates is a 
\emph on
nand 
\emph default
gate (a 
\emph on
not and 
\emph default
gate).
 This gate has a number of inputs ranging from 2 to theoretically infinity
 (but practically 3 or 4) and only outputs a low
\emph on
 
\emph default
signal if all of the inputs are 
\emph on
high
\emph default
 (digital one), otherwise its output is 
\emph on
at ground
\emph default
 or 
\emph on
low
\emph default
 (digital zero).
 The other most common logic gate is the 
\emph on
nor 
\emph default
gate (a 
\emph on
not or 
\emph default
gate).
 This gate outputs a low signal if any of its inputs are high, otherwise
 it outputs a low.
\end_layout

\begin_layout Standard
A common mistake is to think that low or ground mean 
\emph on
zero voltage.

\emph default
 This is only partially true, the high signals are measured with ground
 as their reference.
 So a high signal of 1.8 Volts would be 1.8 Volts higher than ground, and
 could be considered to be at 1.8 Volts if ground is the theoretical zero.
\begin_inset Note Note
status open

\begin_layout Plain Layout
Useful?
\end_layout

\end_inset


\end_layout

\begin_layout Standard
A certain combination of these logic gates are used to build higher-level
 blocks such as flip-flops, which are used to make registers and so on up
 to the entire chip design.
\end_layout

\begin_layout Subsection
Hardware Description Languages
\end_layout

\begin_layout Standard
A 
\emph on
Hardware Description Language
\emph default
 (HDL) can be used to describe any one of these levels, right down to the
 logic gate level, however this last one might not be a good idea considering
 most synthesis tools can produce superior logic gate-level layouts
\begin_inset CommandInset citation
LatexCommand cite
key "key-1"

\end_inset

.
 The level that uses certain blocks of logic gates to describe more complex
 behaviour is called the 
\emph on
Register Transfer Level
\emph default
 or RTL.
 Some blocks are standard implementations that have been widely used and
 nearly fully optimized, such as memories, flip-flops and clocks.
 An RTL flip-flop implementation is shown here: 
\begin_inset space ~
\end_inset


\end_layout

\begin_layout LyX-Code
library IEEE;
\begin_inset Newline newline
\end_inset

use IEEE.std_logic_1164.all;
\begin_inset Newline newline
\end_inset

entity DFF is
\begin_inset Newline newline
\end_inset

     Port ( D   : in  std_logic;
\begin_inset Newline newline
\end_inset

            CLK : in  std_logic;
\begin_inset Newline newline
\end_inset

            Q   : out std_logic;
\begin_inset Newline newline
\end_inset

end DFF;
\begin_inset Newline newline
\end_inset

architecture Behavioural of DFF is
\begin_inset Newline newline
\end_inset

     begin
\begin_inset Newline newline
\end_inset

          process (CLK)
\begin_inset Newline newline
\end_inset

          begin
\begin_inset Newline newline
\end_inset

               if rising_edge(CLK) then
\begin_inset Newline newline
\end_inset

                    Q <= D;
\begin_inset Newline newline
\end_inset

               end if;
\begin_inset Newline newline
\end_inset

          end process;
\begin_inset Newline newline
\end_inset

end Behavioural;
\end_layout

\begin_layout Standard
The IEEE library provides a number of extensions on the original VHDL code
 that allow a more realistic simulation and description of hardware behaviour.
 An entity defines the inputs and outputs of a certain building block, in
 this case the D Flip-flop or DFF.
 The D stands for Delay, and it simple puts on its output Q that which was
 on the input one clock cycle earlier.
 The architecture, in this case Behavioural, takes the description of an
 entity and assigns a real implementation to it.
 All processes are executed in parallel, this does not mean that all are
 triggered at the same time, nor do they take as long to finish, but it
 means that any process can be executed alongside any other process.
 In this case there is only one (nameless) process that describes the entire
 behaviour of the flip-flop.
 It waits for the rising edge of the clock, which is a transition from zero
 to one, and then it schedules the value of D to be put on Q until the next
 rising edge appears.
\end_layout

\begin_layout Standard
This is a basic example of an entity, an architecture and a process.
 This flip-flop could be used in certain numbers to build a 
\emph on
register
\emph default
, a collection of ones and zeroes (henceforth named 
\emph on
bits
\emph default
) that is used to (temporarily) store these values.
 The register could then be used alongside combinational logic to build
 an even bigger entity.
 The idea here is that small building blocks can be combined to produce
 vast and complex circuits that are nearly impossible to describe in one
 go.
 Adding all these layers together also creates a lot of room for error,
 and having a multi-level design makes it somewhat difficult to pinpoint
 the exact level and location of any errors.
 Therefore it is paramount that all code on all levels is tested thoroughly,
 this is done by use of 
\emph on
testbenches
\emph default
.
\begin_inset CommandInset citation
LatexCommand cite
key "key-2"

\end_inset


\end_layout

\begin_layout Standard
Testbenches are made up of code that takes a certain building block, the
 
\emph on
Unit Under Test
\emph default
 (UUT) or 
\emph on
Device Under Test
\emph default
 (DUT).
 The testbench then performs a certain sequence of inputs and monitors the
 outputs.
 If the device performs normally, the received output sequence should match
 a certain 
\emph on
golden reference
\emph default
, the expected output sequence.
 In these testbenches it is also interesting to see how well a device performs
 if its inputs behave outside the normal mode of operation.
 When all of these tests have finished and the output performs as expected,
 the device is ready to be put into production or further down the developmental
 process.
\end_layout

\begin_layout Standard
It is easy to see that if a device is not tested properly and faults propagate
 it can be very expensive to correct, especially at the stage of production,
 where a single photomask, used to 
\begin_inset Quotes eld
\end_inset

print
\begin_inset Quotes erd
\end_inset

 part of the layout, can easily cost $100,000
\begin_inset CommandInset citation
LatexCommand cite
key "key-3"

\end_inset

.
 Therefore a large portion of time is spent writing and executing tests
\begin_inset CommandInset citation
LatexCommand cite
key "key-4"

\end_inset

.
 Practices to improve both the speed and quality of testing and coding exist
 in a large number, but the focus chosen in this thesis is 
\emph on
Test Driven Development
\emph default
 (TDD).
 This practice has proven to increase test coverage
\begin_inset CommandInset citation
LatexCommand cite
key "key-5"

\end_inset

, decrease defect density
\begin_inset CommandInset citation
LatexCommand cite
key "key-8"

\end_inset

 as well as improve code quality
\begin_inset CommandInset citation
LatexCommand cite
key "key-9,key-8"

\end_inset

.
\end_layout

\begin_layout Section
Mission and objectives
\end_layout

\begin_layout Standard
The goal of this thesis is to ease development and testing of VHDL code,
 with a focus on testing and test reporting.
 Practically this means the development of several tools which can be independen
tly used and each have their own merit.
\end_layout

\begin_layout Itemize
A testbench parser that ensures independent testing and proper test report
 generation.
\end_layout

\begin_layout Itemize
A library with many widely-used functions as to speed up programming, as
 well as functions to make reporting possible.
\end_layout

\begin_layout Itemize
A test report that can easily be read but still holds a significant amount
 of detail on errors and successes.
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "key-1"

\end_inset

http://www.asic-world.com/vhdl/intro1.html
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "key-2"

\end_inset

Writing Testbenches: Functional Verification of HDL Models
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "key-3"

\end_inset

Mask Cost and Profitability in Photomask Manufacturing: An Empirical Analysis
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "key-4"

\end_inset

Citation needed !!
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "key-5"

\end_inset

A comparative case study on the impact of test-driven development on program
 design and test coverage
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "key-8"

\end_inset

A Longitudinal Study of the Use of a Test-Driven Development Practice in
 Industry
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "key-9"

\end_inset

Evaluating the Efficacy of Test-Driven Development
\end_layout

\end_body
\end_document
